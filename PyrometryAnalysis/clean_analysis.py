### Notes ###
# raw files should have the .raw file extension so they can be found by spectral
### Required Packages ###
# SpectralPython (spectral), tqdm, NumPy, SciPy, Matplotlib

### Imports ###
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from scipy.optimize import least_squares
from sklearn.linear_model import LinearRegression
import spectral.io.envi as envi
from spectral import imshow, view_cube
from tqdm import tqdm

### Constants ###
h = 6.626e-34 # Planck's constant
c = 299792458 # Speed of light
k = 1.380649e-23 # Boltzmann constant
b = 2.89777e-3 # Wien's constant

### Other Global Variables ###
image = None
units = None
wavelengths = None
pixel = None
row = None
spectrum = None

### Helper Functions ###

def blackbody(l, T, e, offset=0):
    """Blackbody radiation equation
    Input: l: wavelength, T: temperature, e: emissivity, 
            offset: used in fitting to account for stray light in the data
    Output: intensity of a blackbody at the given parameters"""
    return (e * ((2 * h * c**2) / l**5) * (1 / (np.exp((h * c) / (l * k * T)) - 1))) + offset

def construct_paths(folder_path):
    """ Constructs the paths to each of the relevant data files
    Input: path to hyperspectral data folder
    Output: list of paths to [raw hdr, raw raw, white reference hdr, white reference raw, 
                            dark reference hdr, dark reference raw, frame index file] """
    print("Constructing paths...")
    retval = []
    retval.append(folder_path + "/raw.hdr")
    retval.append(folder_path + "/raw.raw")
    retval.append(folder_path + "/whiteReference.hdr")
    retval.append(folder_path + "/whiteReference.raw")
    retval.append(folder_path + "/darkReference.hdr")
    retval.append(folder_path + "/darkReference.raw")
    retval.append(folder_path + "/frameIndex.txt")
    return retval

def load_data(paths, quiet=False):
    """Input: paths list generated by (or in format of) construct_paths
    Output: hyperspectral tensor corrected by the white and dark references"""
    print("Loading data...")
    data_ref = envi.open(paths[0], paths[1])
    white_ref = envi.open(paths[2], paths[3])
    dark_ref = envi.open(paths[4], paths[5])

    white_tensor = np.array(white_ref.load())
    dark_tensor = np.array(dark_ref.load())
    data_tensor = np.array(data_ref.load())

    corrected_data = np.divide(
        np.subtract(data_tensor, dark_tensor),
        np.subtract(white_tensor, dark_tensor))

    if not quiet:
        print(corrected_data)
    return corrected_data

def get_bands(paths, quiet=False):
    """Input: paths list generated by (or in format of) construct_paths
    Output: (Array of wavelength bands, wavelength units string)"""
    print("Getting wavelength bands...")
    global wavelengths
    global units
    file = open(paths[0], 'r')
    text = file.read()

    start_id = "\nwavelength = {\n"
    start_index = text.find(start_id) + len(start_id)
    end_id = "\n}\n;AOI height"
    end_index = text.find(end_id)
    wavelengths = text[start_index:end_index]
    wavelengths = np.array(wavelengths.split("\n,"), dtype=np.float32)

    units_id = "wavelength units = "
    units_index = text.find(units_id) + len(units_id)
    units = text[units_index:text.find(start_id)]

    if not quiet:
        print(f"Units = {units}")
        print(f"Number wavelengths = {len(wavelengths)}")
        print(f"Wavelengths: {wavelengths}")

    return None

def display_image(quiet=False):
    """Displays the hyperspectral image using spectralPy
    Input: None (uses global variables), Output: None"""
    print("Displaying image...")
    if not quiet:
        imshow(image, (100,100,100))
        plt.xticks([])
        plt.yticks([])
        plt.show()

    return None

def plot_spectrum(quiet=False):
    """Plots the selected spectrum
    Input: None (uses global variables), Output: None"""
    print("Plotting spectrum...")
    if not quiet:
        plt.figure(figsize=(5,5))
        plt.scatter(wavelengths, spectrum, s=7)
        plt.title(f"Spectrum for Position ({pixel[0]}, {pixel[1]})", fontsize=17)
        plt.xlabel(f"Wavelength [{units}]", fontsize=12)
        plt.xticks(fontsize=10)
        plt.ylabel("Irradiance [arb. units]", fontsize=12)
        plt.yticks([])
        plt.show()

    return None

def fit_spectrum(quiet=False, check_units=True):
    """Fits the selected spectrum
    Input: None (uses global variables)
    Output: Fitted parameters, final least squares cost"""
    if check_units:
        print("\nIf this test fails, check lower in this function to adjust wavelenght unit conversion to m")
        print("Checking that units are nm... ", end="")
        assert(units == "nm")
        print("Passed")
    if not quiet:
        print("Fitting spectrum...")

    # params = [a0, a1, a2, offset, T]
    params0 = np.array([1, 1, 1, 0.1, 1000])
    def intensity(params, l):
        e = params[0] + (params[1] * l) + (params[2] * l**2)
        return blackbody(l, params[4], e, params[3])
    
    def residuals(params):
        result = []
        for i in range(len(wavelengths)):
            Si = intensity(params, wavelengths[i] * 1e-9) # assuming units are nm
            St = spectrum[i]
            result.append(Si - St)
        return np.array(result)

    result = least_squares(residuals, params0)

    if not quiet:
        yfit = []
        for l in wavelengths:
            yfit.append(intensity(result.x, l * 1e-9))

        plt.figure(figsize=(5,5))
        plt.scatter(wavelengths, spectrum, s=5)
        plt.scatter(wavelengths, yfit, s=5)
        plt.title(f"Fitted Spectrum for Position ({pixel[0]}, {pixel[1]})", fontsize=15)
        plt.xlabel(f"Wavelength [{units}]", fontsize=12)
        plt.xticks(fontsize=10)
        plt.ylabel("Intensity [arb. units]", fontsize=12)
        plt.yticks([])
        plt.legend(["Actual", "Fitted"], fontsize=10)
        plt.show()

    return result.x, result.cost

def fit_row(quiet=False):
    """Fits the entire selected row
    Input: None (uses global variables)
    Output: List of temperatures and fitting final costs"""
    print("Fitting row...")
    global spectrum
    temps, costs = [], []
    for frame_index in tqdm(range(len(row))):
        spectrum = row[frame_index]
        params, cost = fit_spectrum(quiet=quiet, check_units=False)
        temps.append(params[-1]), costs.append(cost)

    return temps, costs

def plot_row_results(Ts, costs, quiet=False):
    """Plots results from fitting all pixels in a row
    Input: list of temperatures, list of fitting costs
    Output: None"""
    print("Plotting row results...")
    if not quiet:
        x = np.array(range(len(Ts)))
        fig, ax = plt.subplots(nrows = 2, ncols = 1)
        fig.set_figwidth(6)
        fig.set_figheight(7)
        ax[0].set_title("Fitting Results for Entire Row", fontsize=15)

        ax[0].scatter(x, Ts, s=3)
        ax[0].set_ylabel("Temperature [K]", fontsize=12)
        model = LinearRegression()
        model.fit(x.reshape(-1,1), Ts)
        ax[0].plot(x, model.predict(x.reshape(-1, 1)), color="red", linewidth=4)

        ax[1].scatter(range(len(costs)), costs, s=3)
        ax[1].set_ylabel("Final Cost", fontsize=12)

        ax[1].set_xlabel("Frame", fontsize=12)

        plt.show()

    return None

### Main ###

def main():
    global image
    global pixel
    global row
    global spectrum

    while True:
        try:
            folder_path = input("Enter the file path to your hyperspectral data folder or exit ('exit'): ")
            if folder_path == 'exit': return
            paths = construct_paths(folder_path)
            image = load_data(paths, quiet=True)
            _ = get_bands(paths, quiet=True)
        except: 
            print("Invalid argument")
            continue

        _ = display_image()

        while True:
            option = input("\nDo you want to analyze a single pixel ('1') or entire row ('2') or return to folder selection ('exit')? ")
            if option == '1': analyze_row = False
            elif option == '2': analyze_row = True
            elif option == 'exit': break
            else: continue

            if analyze_row:
                try:
                    row = int(input("\nEnter the row: "))
                    row = image[:,row,:]
                except: 
                    print("Invalid argument")
                    continue
                
                temps, costs = fit_row(quiet=True)
                _ = plot_row_results(temps, costs)

            else:
                pixel = input("\nEnter the pixel ('frame,position'): ")
                try:
                    pixel = np.array(pixel.split(","), dtype=np.int64)
                    x, y = pixel[0], pixel[1]
                    spectrum = image[x][y]
                    # assert(len(spectrum) == len(wavelengths))
                except: 
                    print("Invalid argument")
                    continue

                _ = plot_spectrum()
                result, cost = fit_spectrum()
                print(f"\nTemperature = {result[4]} K\n")
                print(f"Emissivity = ({result[0]}) + ({result[1]} * wavelength) + ({result[2]} * wavelength^2)")
                print(f"Stray Light Offset = {result[3]}")
                print(f"Final Cost = {cost}")
    
if __name__ == "__main__": main()